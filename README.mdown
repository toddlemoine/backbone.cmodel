# Backbone.CModel

The `C` is for computed.

Backbone.CModel is an extended Backbone.Model class that supports computed attributes. 
While your model may define `firstName` and `lastName` attributes, you may want or
need a `fullName` computed attribute for use in your views. Backbone.CModel gives
you a way to define and access those attributes without mucking up the real model
attributes.

```
var Person = Backbone.CModel.extend({
	c: {
		fullName: ['firstName', 'lastName'],
		cityStateZip: function(attrs) {
			returns attrs.city +', '+ attrs.state + ' ' + attrs.zip;
		}
	}
});

var p = new Person({ 
	firstName: 'Walker',
	lastName: 'Percy',
	city: 'New Orleans',
	state: 'LA',
	zip: '70816'
});

p.get('fullName'); 			  // 'Walker Percy'
p.get('cityStateZip'); 		  // 'New Orleans, LA 70816'
p.toCJSON();		          // { firstName:..., fullName: 'Walker Percy', cityStateZip: 'New Orleans, LA 70816' }
p.toJSON({ computed: true }); // Same as toCJSON({ computed: true })
p.toCJSON({ only: true }); 	  // { fullName: 'Walker Percy', cityStateZip: 'New Orleans, LA 70816' }

```

## Defining computed attributes

Computed attributes are defined in the `c` property of a CModel. C is an object where
the key is the name of the computed attribute and the value can be one of three things:

1. Function that accepts an object hash of the model's attributes and returns a string or 
other value you expect.
2. An array of model attribute names and return them, space separated.
3. A static value, such as a simple string or integer.

Extend Backbone.CModel, overriding c with your own has.

## Methods

There are only 4 methods that define a CModel object.

### get( attr )

Overridden Backbone.Model get(). If the attr doesn't exist in the `c` object,
the standard Backbone.Model get() is called.

### getC( attr )

Pass is a string that is the computed attribute name and get the value. Or,
pass an array of strings and get an object with the corresponding computed 
attributes as keys and their values.

### toJSON( options )

Pass `{ computed: true }` as the option to get the standard model's json
representation with the computed attributes included.

### toCJSON( options )

Returns the standard model's json representation with the computed attributes included.
Pass `{ only: true }` to get only the computed attributes.
